{"version":3,"file":"src_views_Location_jsx.js","mappings":";;;;;;;;;;;;;;;;AAA0C;AACgC;AAIzC;AAOR;AAEzB,SAASa,QAAQA,CAAA,EAAG;EAClB,MAAM;IAAEC;EAAS,CAAC,GAAGX,qEAAa,CAAC;IACjCY,gBAAgB,EAAEC,OAAO,CAACC,GAAG,CAACC,+BAA+B;IAC7DC,SAAS,EAAE,CAAC,QAAQ;EACtB,CAAC,CAAC;EAEF,IAAI,CAACL,QAAQ,EAAE,OAAOM,oDAAA,cAAK,YAAe,CAAC;EAC3C,OAAOA,oDAAA,CAACC,GAAG,MAAE,CAAC;AAChB;AAEA,SAASA,GAAGA,CAAA,EAAG;EACb,MAAMC,MAAM,GAAGrB,8CAAO,CAAC,OAAO;IAAEsB,GAAG,EAAE,KAAK;IAAEC,GAAG,EAAE,CAAC;EAAM,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,+CAAQ,CAAC,IAAI,CAAC;EAE9C,OACEoB,oDAAA,CAAAO,2CAAA,QACEP,oDAAA;IAAKQ,SAAS,EAAC;EAAkB,GAC/BR,oDAAA,CAACS,kBAAkB;IAACH,WAAW,EAAEA;EAAY,CAAE,CAC5C,CAAC,EAENN,oDAAA,CAAClB,6DAAS;IACR4B,IAAI,EAAE,EAAG;IACTR,MAAM,EAAEA,MAAO;IACfS,qBAAqB,EAAC;EAAe,GACpCN,QAAQ,IAAIL,oDAAA,CAAChB,0DAAM;IAAC4B,QAAQ,EAAEP;EAAS,CAAE,CACjC,CACX,CAAC;AAEP;AAEA,MAAMI,kBAAkB,GAAGA,CAAC;EAAEH;AAAY,CAAC,KAAK;EAC9C,MAAM;IACJO,KAAK;IACLC,KAAK;IACLC,QAAQ;IACRC,WAAW,EAAE;MAAEC,MAAM;MAAEC;IAAK,CAAC;IAC7BC;EACF,CAAC,GAAGlC,mEAAqB,CAAC,CAAC;EAE3B,MAAMmC,YAAY,GAAG,MAAOC,OAAO,IAAK;IACtCN,QAAQ,CAACM,OAAO,EAAE,KAAK,CAAC;IACxBF,gBAAgB,CAAC,CAAC;IAElB,MAAMG,OAAO,GAAG,MAAMpC,mEAAU,CAAC;MAAEmC;IAAQ,CAAC,CAAC;IAC7C,MAAM;MAAElB,GAAG;MAAEC;IAAI,CAAC,GAAG,MAAMjB,kEAAS,CAACmC,OAAO,CAAC,CAAC,CAAC,CAAC;IAChDhB,WAAW,CAAC;MAAEH,GAAG;MAAEC;IAAI,CAAC,CAAC;EAC3B,CAAC;EAED,OACEJ,oDAAA,CAACZ,qDAAQ;IAACmC,QAAQ,EAAEH;EAAa,GAC/BpB,oDAAA,CAACX,0DAAa;IACZyB,KAAK,EAAEA,KAAM;IACbU,QAAQ,EAAGC,CAAC,IAAKV,QAAQ,CAACU,CAAC,CAACC,MAAM,CAACZ,KAAK,CAAE;IAC1Ca,QAAQ,EAAE,CAACd,KAAM;IACjBL,SAAS,EAAC,gBAAgB;IAC1BoB,WAAW,EAAC;EAAmB,CAChC,CAAC,EACF5B,oDAAA,CAACV,4DAAe,QACdU,oDAAA,CAACT,yDAAY,QACV0B,MAAM,KAAK,IAAI,IACdC,IAAI,CAACW,GAAG,CAAC,CAAC;IAAEC,QAAQ;IAAEC;EAAY,CAAC,KACjC/B,oDAAA,CAACR,2DAAc;IAACwC,GAAG,EAAEF,QAAS;IAAChB,KAAK,EAAEiB;EAAY,CAAE,CACrD,CACS,CACC,CACT,CAAC;AAEf,CAAC;AAED,+DAAetC,QAAQ","sources":["webpack://seven-tech-location/./src/views/Location.jsx"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\nimport usePlacesAutocomplete, {\n  getGeocode,\n  getLatLng,\n} from 'use-places-autocomplete';\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxList,\n  ComboboxOption,\n} from '@reach/combobox';\n\nfunction Location() {\n  const { isLoaded } = useLoadScript({\n    googleMapsApiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,\n    libraries: ['places'],\n  });\n\n  if (!isLoaded) return <div>Loading...</div>;\n  return <Map />;\n}\n\nfunction Map() {\n  const center = useMemo(() => ({ lat: 43.45, lng: -80.49 }), []);\n  const [selected, setSelected] = useState(null);\n\n  return (\n    <>\n      <div className=\"places-container\">\n        <PlacesAutocomplete setSelected={setSelected} />\n      </div>\n\n      <GoogleMap\n        zoom={10}\n        center={center}\n        mapContainerClassName=\"map-container\">\n        {selected && <Marker position={selected} />}\n      </GoogleMap>\n    </>\n  );\n}\n\nconst PlacesAutocomplete = ({ setSelected }) => {\n  const {\n    ready,\n    value,\n    setValue,\n    suggestions: { status, data },\n    clearSuggestions,\n  } = usePlacesAutocomplete();\n\n  const handleSelect = async (address) => {\n    setValue(address, false);\n    clearSuggestions();\n\n    const results = await getGeocode({ address });\n    const { lat, lng } = await getLatLng(results[0]);\n    setSelected({ lat, lng });\n  };\n\n  return (\n    <Combobox onSelect={handleSelect}>\n      <ComboboxInput\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        disabled={!ready}\n        className=\"combobox-input\"\n        placeholder=\"Search an address\"\n      />\n      <ComboboxPopover>\n        <ComboboxList>\n          {status === 'OK' &&\n            data.map(({ place_id, description }) => (\n              <ComboboxOption key={place_id} value={description} />\n            ))}\n        </ComboboxList>\n      </ComboboxPopover>\n    </Combobox>\n  );\n};\n\nexport default Location;\n"],"names":["useState","useMemo","GoogleMap","useLoadScript","Marker","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","Location","isLoaded","googleMapsApiKey","process","env","NEXT_PUBLIC_GOOGLE_MAPS_API_KEY","libraries","createElement","Map","center","lat","lng","selected","setSelected","Fragment","className","PlacesAutocomplete","zoom","mapContainerClassName","position","ready","value","setValue","suggestions","status","data","clearSuggestions","handleSelect","address","results","onSelect","onChange","e","target","disabled","placeholder","map","place_id","description","key"],"sourceRoot":""}